package org.liyanxu;

import lombok.extern.slf4j.Slf4j;
import org.apache.avro.Schema;
import org.apache.avro.file.DataFileReader;
import org.apache.avro.file.DataFileWriter;
import org.apache.avro.io.DatumReader;
import org.apache.avro.io.DatumWriter;
import org.apache.avro.reflect.ReflectData;
import org.apache.avro.reflect.ReflectDatumReader;
import org.apache.avro.reflect.ReflectDatumWriter;
import org.apache.avro.specific.SpecificDatumReader;
import org.apache.avro.specific.SpecificDatumWriter;
import org.liyanxu.model.User;
import org.liyanxu.model.UserSpecific;
import java.io.File;
import java.io.IOException;
import java.time.Instant;
import java.util.Arrays;

@Slf4j
public class TryoutAvro {

    public static void tryoutReflect() throws IOException {
        // Generate schema using Reflect
        Schema schema = ReflectData.get().getSchema(User.class);
        log.info("Schema generated by ReflectData: " + schema + "\n");

        // Create User
        User u1 = User.builder()
                .name("A")
                .age(20)
                .phoneNumbers(Arrays.asList("1111111", "2222222"))
                .company("SpaceZ")
                .lastUpdate(Instant.now())
                .build();
        User u2 = User.builder()
                .name("B")
                .age(30)
                .phoneNumbers(Arrays.asList("3333333"))
                .lastUpdate(Instant.now())
                .build();

        log.info("Objects before serialization:");
        log.info(u1.toString());
        log.info(u2.toString());

        // Serialize data using Reflect
        File fileR = new File("users.avro");
        DatumWriter<User> writerR = new ReflectDatumWriter(User.class);  // Serialize objects to in-memory binary data
        DataFileWriter<User> outR = new DataFileWriter(writerR).create(schema, fileR);    // Write binary data to file

        outR.append(u1);
        outR.append(u2);
        outR.close();
        log.info("Serialize objects to file...\n");

        // Deserialize data using Reflect
        DatumReader<User> readerR = new ReflectDatumReader(User.class);
        // DatumReader<User> readerR = new ReflectDatumReader();    // This will also work!
        DataFileReader<User> inR = new DataFileReader(fileR, readerR);
        log.info("Deserialize objects from file...");
        for(User u : inR) {
            log.info(u.toString());
        }
        inR.close();
    }

    public static void tryoutSpecific() throws IOException {
        // Get schema using Specific POJO generated by avro-tool
        Schema schema = UserSpecific.getClassSchema();
        log.info("Schema returned by Spefific POJO generated by avro-tool: " + schema + "\n");

        // Create UserSpecific
        UserSpecific u1 = UserSpecific.newBuilder()
                .setName("C")
                .setAge(40)
                .setPhoneNumbers(Arrays.asList("4444444", "5555555"))
                .setCompany("SpaceY")
                .build();
        UserSpecific u2 = UserSpecific.newBuilder()
                .setName("D")
                .setAge(50)
                .setPhoneNumbers(Arrays.asList("6666666"))
                .build();

        log.info("Objects before serialization:");
        log.info(u1.toString());
        log.info(u2.toString());

        // Serialize data using Specific
        File fileS = new File("UserSpecific.avro");
        DatumWriter<UserSpecific> writerS = new SpecificDatumWriter(UserSpecific.class);
        DataFileWriter<UserSpecific> outS = new DataFileWriter(writerS).create(schema, fileS);

        outS.append(u1);
        outS.append(u2);
        outS.close();
        log.info("Serialize objects to file...\n");

        // Deserialize data using Specific
        DatumReader<UserSpecific> readerS = new SpecificDatumReader(UserSpecific.class);
        // DatumReader<UserSpecific> readerS = new SpecificDatumReader();   // This will also work!
        DataFileReader<UserSpecific> inS = new DataFileReader(fileS, readerS);
        log.info("\nDeserialize objects from file using Avro Specific...");
        for(UserSpecific u : inS) {
            log.info(u.toString());
        }
        inS.close();
    }

    public static void main(String[] args) throws IOException {
        tryoutReflect();
        log.info("--------------------");
        tryoutSpecific();
    }

}
